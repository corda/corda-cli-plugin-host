buildscript {
    dependencies {
        classpath "org.apache.logging.log4j:log4j-core:$log4jVersion"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'application'
    id 'corda.common-publishing'
}

dependencies {
    implementation project(":api")

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    implementation "org.apache.logging.log4j:log4j-api:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-core:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-layout-template-json:$log4jVersion"

    // removes jacksons large libs from plugins
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"

    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "org.pf4j:pf4j:${pf4jVersion}"
    implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"
    implementation "org.yaml:snakeyaml:${snakeyamlVersion}"

    api "info.picocli:picocli:${picoCliVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter:${junitJupiterVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

version rootProject.version
group = "net.corda.cli.host"

test {
    useJUnitPlatform()
}

def appMainClass = "net.corda.cli.application.BootKt"
def vcsUrl = System.getenv('GIT_URL') ?: 'https://github.com/corda/corda-cli-plugin-host.git'

application {
    mainClass = appMainClass
}

tasks.named("run") {
    doFirst {
        systemProperty "pf4j.pluginsDir", file(pluginsDir).absolutePath
    }
}

def mergeLog4j2Plugins = tasks.register('mergeLog4j2Plugins') {
    dependsOn configurations.runtimeClasspath
    inputs.files(configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) })
    def outputDir = layout.buildDirectory.dir('log4j')
    outputs.dir(outputDir)

    doLast {
        def inputFiles = inputs.files.getFiles().findAll { it.name == 'Log4j2Plugins.dat' }.collect { it.toURI().toURL() }
        if (inputFiles) {
            def combinedCache = new org.apache.logging.log4j.core.config.plugins.processor.PluginCache()
            combinedCache.loadCacheFiles(Collections.enumeration(inputFiles))
            def outputFile = outputDir.get().file('META-INF/org/apache/logging/log4j/core/config/plugins/Log4j2Plugins.dat').asFile
            outputFile.parentFile.mkdirs()
            try (OutputStream out = new FileOutputStream(outputFile)) {
                combinedCache.writeCache(out)
            }
        }
    }
}

def cordaCLi = tasks.named('jar', Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    dependsOn mergeLog4j2Plugins

    from (sourceSets.main.output)
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
        exclude "META-INF/*.EC"
        exclude "META-INF/INDEX.LIST"
        exclude "META-INF/versions/*/module-info.class"
        exclude "META-INF/org/apache/logging/log4j/core/config/plugins/Log4j2Plugins.dat"
        exclude "module-info.class"
    }
    from(mergeLog4j2Plugins)

    var cliHostCommitId = com.gradle.Utils.execAndGetStdOut "git", "rev-parse", "--verify", "HEAD"

    manifest {
        attributes["Main-Class"] = appMainClass
        attributes["Multi-Release"] = true
        attributes["Plugin-Name"] = "Corda CLI"
        attributes["Plugin-Version"] = "${project.version}"
        attributes["Plugin-Provider"] = "R3"
        attributes["Plugin-Git-Commit"] = "$cliHostCommitId"
    }

    archiveBaseName = 'corda-cli'
    archiveVersion = project.version
}

tasks.register('publishOSGiImage', DeployableContainerBuilder) {
    sourceTasks = Arrays.asList(cordaCLi.get())
    dependsOn(cordaCLi)
    overrideEntryName = 'cli'
    overrideContainerName = 'cli'
    arguments = Arrays.asList("-Dpf4j.pluginsDir=/opt/override/plugins")
    if (project.hasProperty('jibRemotePublish')) {
        remotePublish = jibRemotePublish.toBoolean()
    }
    if (project.hasProperty('baseImage')) {
        baseImageName = baseImage
    }
    if (project.hasProperty('doDockerHubPublish')) {
        dockerHubPublish = doDockerHubPublish.toBoolean()
    }
    if (project.hasProperty('useDockerDaemon')) {
        useDaemon = useDockerDaemon.toBoolean()
    }
    if (project.hasProperty('isNightly')) {
        nightlyBuild = isNightly.toBoolean()
    }
    if (project.hasProperty('workerBaseImageTag')) {
        baseImageTag = workerBaseImageTag
    }
    environment = Map.of(
            "CORDA_CLI_HOME_DIR", "/opt/override/home"
    )
    if (project.hasProperty('multiArchSupport')) {
        multiArch = multiArchSupport.toBoolean()
    }
    if (project.hasProperty('targetPlatform')) {
        targetPlatform = project.property('targetPlatform').toString()
    }

    setEntry = true
}

artifacts {
    archives cordaCLi
}

// required as cordaCLi artifact not handled by r3Publish
publishing {
    publications {
        configureEach {
            pom {
                name = 'corda-cli'
                url = vcsUrl - '.git'
                scm {
                    url = vcsUrl
                }

                if ((project.hasProperty("licenseName")) && (project.hasProperty("licenseUrl"))) {
                    licenses {
                        license {
                            name = licenseName
                            url = licenseUrl
                            distribution = licenseUrl
                        }
                    }
                }

                developers {
                    developer {
                        id = 'R3'
                        name = 'R3'
                        email = 'dev@corda.net'
                    }
                }
            }
        }

        mavenCordaCLi(MavenPublication) {
            artifact cordaCLi
            artifactId = "corda-cli"
            version = project.version
        }
    }
    
    if (project.hasProperty('maven.repo.s3') && project.hasProperty('releasable')) {
            repositories {
                maven {
                    name = 'AWS'
                    url = project.findProperty('maven.repo.s3')
                    credentials(AwsCredentials) {
                        accessKey "${System.getenv('AWS_ACCESS_KEY_ID')}"
                        secretKey "${System.getenv('AWS_SECRET_ACCESS_KEY')}"
                        sessionToken "${System.getenv('AWS_SESSION_TOKEN')}"
                    }
                }
            }
    }
}
