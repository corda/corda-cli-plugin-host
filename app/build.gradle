plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'application'
    id 'corda.common-publishing'
}

dependencies {
    implementation project(":api")

    implementation libs.kotlin.stdlib

    // log4j bundles: ["log4j-api", "log4j-core", "log4j-slf4j-impl"]
    implementation libs.bundles.log4j

    // removes jacksons large libs from plugins
    implementation libs.jackson.module
    implementation libs.jackson.dataformat
    implementation libs.jackson.core

    // removes the kafka clients large size from any plugins requiring it (topic config etc)
    implementation libs.kafka.clients

    implementation libs.slf4j
    implementation libs.pf4j
    implementation libs.commons.lang3
    implementation libs.snakeyaml

    // com.github.kittinunf.fuel bundles: ["fuel", "fuel-json"]
    implementation libs.bundles.fuel

    api libs.picocli

    testImplementation libs.junit.jupiter
    testImplementation libs.system.lambda
}

version rootProject.version
group = "net.corda.cli.host"

test {
    useJUnitPlatform()
}

def appMainClass = "net.corda.cli.application.BootKt"
def vcsUrl = System.getenv('GIT_URL') ?: 'https://github.com/corda/corda-cli-plugin-host.git'

application {
    mainClass = appMainClass
}

tasks.named("run") {
    doFirst {
        systemProperty "pf4j.pluginsDir", file(pluginsDir).absolutePath
    }
}

def cordaCLi = tasks.named('jar', Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from (sourceSets.main.output)
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
        exclude "META-INF/*.EC"
        exclude "META-INF/INDEX.LIST"
        exclude "META-INF/versions/*/module-info.class"
        exclude "module-info.class"
    }

    manifest {
        attributes["Main-Class"] = appMainClass
        attributes["Multi-Release"] = true
    }

    archiveBaseName = 'corda-cli'
    archiveVersion = project.version
}

tasks.register('publishOSGiImage', DeployableContainerBuilder) {
    sourceTasks = Arrays.asList(cordaCLi.get())
    dependsOn(cordaCLi)
    overrideEntryName = 'cli'
    overrideContainerName = 'cli'
    arguments = Arrays.asList("-Dpf4j.pluginsDir=/opt/override/plugins")
    if (project.hasProperty('jibRemotePublish')) {
        remotePublish = jibRemotePublish.toBoolean()
    }
    if (project.hasProperty('baseImage')) {
        baseImageName = baseImage
    }
    if (project.hasProperty('doDockerHubPublish')) {
        dockerHubPublish = doDockerHubPublish.toBoolean()
    }
    if (project.hasProperty('useDockerDaemon')) {
        useDaemon = useDockerDaemon.toBoolean()
    }
    if (project.hasProperty('isNightly')) {
        nightlyBuild = isNightly.toBoolean()
    }
    if (project.hasProperty('workerBaseImageTag')) {
        baseImageTag = workerBaseImageTag
    }
    environment = Map.of(
            "CORDA_CLI_HOME_DIR", "/opt/override/home"
    )
    if (project.hasProperty('multiArchSupport')) {
        multiArch = multiArchSupport.toBoolean()
    }
    if (project.hasProperty('targetPlatform')) {
        targetPlatform = project.property('targetPlatform').toString()
    }

    setEntry = true
}

artifacts {
    archives cordaCLi
}

// required as cordaCLi artifact not handled by r3Publish
publishing {
    publications {
        configureEach {
            pom {
                name = 'corda-cli'
                url = vcsUrl - '.git'
                scm {
                    url = vcsUrl
                }

                if ((project.hasProperty("licenseName")) && (project.hasProperty("licenseUrl"))) {
                    licenses {
                        license {
                            name = licenseName
                            url = licenseUrl
                            distribution = licenseUrl
                        }
                    }
                }

                developers {
                    developer {
                        id = 'R3'
                        name = 'R3'
                        email = 'dev@corda.net'
                    }
                }
            }
        }

        mavenCordaCLi(MavenPublication) {
            artifact cordaCLi
            artifactId = "corda-cli"
            version = project.version
        }
    }
    
    if (project.hasProperty('maven.repo.s3') && project.hasProperty('releasable')) {
            repositories {
                maven {
                    name = 'AWS'
                    url = project.findProperty('maven.repo.s3')
                    credentials(AwsCredentials) {
                        accessKey "${System.getenv('AWS_ACCESS_KEY_ID')}"
                        secretKey "${System.getenv('AWS_SECRET_ACCESS_KEY')}"
                        sessionToken "${System.getenv('AWS_SESSION_TOKEN')}"
                    }
                }
            }
    }
}
